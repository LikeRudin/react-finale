// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

//snipet

  //  id Int @id @default(autoincrement())
  // createdAt DateTime @default(now())
  // updatedAt DateTime @default(now())

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone String? @unique
  email String? @unique
  username String
  password String
  avatar String?
  record UserRecord?
  }

model UserRecord {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique

  meetUps MeetUp[]
  meetUpLikes MeetUpLike[]
  reviews Review[]
  reviewLikes ReviewLike[]

  posts Post[]
  postLikes PostLike[]
  comments Comment[]
  commentLikes CommentLike[]

}

model MeetUp {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name String
  image String?
  dDay DateTime
  description String
  isOpened Boolean @default(true)
  
  record UserRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int  

  likes MeetUpLike[]
  review Review[]

  @@index([recordId])
}

model MeetUpLike {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  record UserRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int

  meetUp MeetUp @relation(fields: [meetUpId], references: [id], onDelete: Cascade)
  meetUpId Int

  @@index([recordId])
  @@index([meetUpId])
}

model Review {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review String @db.MediumText

  record UserRecord @relation(fields: [recordId], references: [id], onDelete:Cascade)
  recordId Int
  meetUp MeetUp @relation(fields: [meetUpId], references: [id], onDelete: Restrict)
  meetUpId Int

  likes ReviewLike[]

  @@index([recordId])
  @@index([meetUpId])
}

model ReviewLike { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  record UserRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  
  @@index([recordId])
  @@index([reviewId])
  }


model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  record UserRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int

  comments Comment[]
  likes PostLike[]

  @@index([recordId])

}

model PostLike {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String
  record UserRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([recordId])
  @@index([postId])

}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.MediumText

  record UserRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)
  recordId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  likes CommentLike[]

  @@index([postId])
  @@index([recordId])

}

model CommentLike {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  record UserRecord @relation(fields: [recordId], references:[id], onDelete: Cascade)
  recordId Int

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@index([recordId])
  @@index([commentId])

}

