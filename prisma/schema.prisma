// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

//snipet

  //  id Int @id @default(autoincrement())
  // createdAt DateTime @default(now())
  // updatedAt DateTime @default(now())

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone String? @unique
  email String? @unique
  username String
  password String
  avatar String?
  
  meetUps MeetUp[]
  meetUpLikes MeetUpLike[]
  meetupComments MeetUpComment[]
  reviews Review[]
  reviewLikes ReviewLike[]
  reviewComment ReviewComment[]
  reviewCommentLikes ReviewCommentLike[]

  posts Post[]
  postLikes PostLike[]
  comments Comment[]
  commentLikes CommentLike[]

  streams Stream[]
  streamMessages StreamMessage[]

  activityLogs ActivityLog[]
  notifications Notification[] 
  }

model MeetUp {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name String
  image String?
  schedule DateTime
  description String @db.MediumText

  isOpened Boolean @default(true)
  images MeetupImage[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int 


  comments MeetUpComment[]
  
  likes MeetUpLike[]
  review Review[]
  
  @@index([userId])

}

model MeetupImage {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetUp MeetUp @relation(fields: [meetUpId], references:[id])
  meetUpId Int
  path String

  @@index([meetUpId])
}

model MeetUpComment {  
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.MediumText
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  meetUp MeetUp @relation(fields: [meetUpId], references: [id], onDelete: Cascade)
  meetUpId Int

  parentId Int? 
  parent MeetUpComment? @relation("commentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies MeetUpComment[] @relation("commentToComment")

  @@index([parentId])
  @@index([userId])
  @@index([meetUpId])


}

model MeetUpLike {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  meetUp MeetUp @relation(fields: [meetUpId], references: [id], onDelete: Cascade)
  meetUpId Int

  @@index([userId])
  @@index([meetUpId])
}

model Review {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.MediumText
  images ReviewImage[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  meetUp MeetUp @relation(fields: [meetUpId], references: [id], onDelete: Restrict)
  meetUpId Int

  likes ReviewLike[]
  comments ReviewComment[]

  @@index([userId])
  @@index([meetUpId])
}


model ReviewImage {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  path String

  review Review @relation(fields: [reviewId], references:[id], onDelete: Cascade)
  reviewId Int

  
  @@index([reviewId])
}


model ReviewLike { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int
  
  @@index([userId])
  @@index([reviewId])
  }

model ReviewComment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId Int

  parentId Int? 
  parent ReviewComment? @relation("commentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies ReviewComment[] @relation("commentToComment")

  likes ReviewCommentLike[]
  
  @@index([parentId])
  @@index([userId])
  @@index([reviewId])
}

model ReviewCommentLike{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  review ReviewComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  
  @@index([userId])
  @@index([commentId])

}


model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  parentId Int? 
  parent Post? @relation("commentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies Post[] @relation("commentToComment")


  post String @db.MediumText
  images PostImage[]
  

  comments Comment[]
  likes PostLike[]

  @@index([userId])
  @@index([parentId])

}
model PostImage{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([postId])

}

model PostLike {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@index([userId])
  @@index([postId])
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.MediumText

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  parentId Int? 
  parent Comment? @relation("commentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies Comment[] @relation("commentToComment")

  likes CommentLike[]

  @@index([parentId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@index([userId])
  @@index([commentId])
}

model Stream {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String @db.MediumText
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  cloudflareId String
  cloudflareUrl String
  cloudflareKey String

  messages StreamMessage[]
  
  @@index([userId])
}

model StreamMessage {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.MediumText

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  

  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId Int

  @@index([userId])
  @@index([streamId])
}

model ActivityLog {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int 

  type Activity 
  activityId Int

  @@index([userId])
}

enum Activity{
  Stream
  MeetUp
  MeetUpLike
  MeetUpComment
  MeetUpCommentLike
  Review
  ReviewLike
  ReviewComment
  ReviewCommentLike
  Post
  PostLike
  Comment
  CommentLike
}


model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type OthersReaction  
  sednerId Int

  receiver User @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId Int 

  @@index([receiverId])

}

enum OthersReaction {
  MeetUpLike
  MeetUpComment
  MeetUpCommentLike
  Review
  ReviewLike
  ReviewComment
  ReviewCommentLike
  Post
  PostLike
  Comment
  CommentLike
}
